name: Deploy Inventory Tracker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
 
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Create project structure
      run: |
        mkdir -p public
        mkdir -p src/components

    - name: Create package.json with homepage
      run: |
        cat > package.json << 'EOL'
        {
          "name": "batch-inventory-chart",
          "version": "0.1.0",
          "private": true,
          "homepage": ".",
          "dependencies": {
            "react": "^18.2.0",
            "react-dom": "^18.2.0",
            "react-scripts": "5.0.1",
            "recharts": "^2.5.0"
          },
          "scripts": {
            "start": "react-scripts start",
            "build": "react-scripts build",
            "test": "react-scripts test",
            "eject": "react-scripts eject"
          },
          "eslintConfig": {
            "extends": [
              "react-app"
            ],
            "rules": {
              "no-unused-vars": "warn"
            }
          },
          "browserslist": {
            "production": [
              ">0.2%",
              "not dead",
              "not op_mini all"
            ],
            "development": [
              "last 1 chrome version",
              "last 1 firefox version",
              "last 1 safari version"
            ]
          }
        }
        EOL

    - name: Create HTML with debugging
      run: |
          cat > public/index.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="utf-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1" />
              <title>Batch Availability</title>
              <style>
                body { margin: 0; padding: 0; }
                .error-display {
                  background: #fee;
                  color: #c00;
                  padding: 10px;
                  margin: 10px;
                  border: 1px solid #f00;
                  border-radius: 4px;
                }
              </style>
            </head>
            <body>
              <div id="root"></div>
              <script>
                // Error handling for React
                window.addEventListener('error', function(e) {
                  const errorDiv = document.createElement('div');
                  errorDiv.className = 'error-display';
                  errorDiv.innerHTML = '<strong>Error:</strong> ' + e.message;
                  document.body.appendChild(errorDiv);
                });
              </script>
            </body>
          </html>
          EOL
          
    - name: Create simpler React files
      run: |
          cat > src/index.js << 'EOL'
          import React from "react";
          import ReactDOM from "react-dom/client";
          import "./index.css";
          import InventoryTracker from "./components/InventoryTracker";

          // Simple app wrapper
          const App = () => {
            return <InventoryTracker />;
          };
          
          // Error boundary to catch rendering errors
          class ErrorBoundary extends React.Component {
            constructor(props) {
              super(props);
              this.state = { hasError: false, error: null };
            }
            
            static getDerivedStateFromError(error) {
              return { hasError: true, error };
            }
            
            render() {
              if (this.state.hasError) {
                return (
                  <div style={{ padding: '20px', color: 'red', background: '#fee', border: '1px solid red', margin: '20px' }}>
                    <h2>Something went wrong.</h2>
                    <p>{this.state.error?.toString()}</p>
                  </div>
                );
              }
              
              return this.props.children;
            }
          }
          
          const root = ReactDOM.createRoot(document.getElementById("root"));
          root.render(
            <ErrorBoundary>
              <App />
            </ErrorBoundary>
          );
          EOL
          
          cat > src/index.css << 'EOL'
          @import url('https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css');
          
          body {
            margin: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
              'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
              sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
          EOL
          
    - name: Create simplified InventoryTracker component
      run: |
        cat > src/components/InventoryTracker.js << 'EOL'
        import React, { useRef, useState, useEffect } from 'react';
        import { BarChart, Bar, XAxis, YAxis, ResponsiveContainer, Legend } from 'recharts';

        const InventoryTracker = () => {
          // Simplified data structure
          const inventoryData = [
            { batch: 'Batch 17', remaining: 25, total: 75 },
            // { batch: 'Batch 18', remaining: 75, total: 75 },
           // { batch: 'Batch 19', remaining: 80, total: 80 },
           // { batch: 'Batch 20', remaining: 100, total: 100 }
          ];
          
          // Process data in one pass
          const processedData = inventoryData.map(item => {
            const soldCount = item.total - item.remaining;
            const remainingPercentage = Math.round((item.remaining / item.total) * 100);
            return {
              ...item,
              sold: soldCount,
              remainingPercentage,
              soldPercentage: 100 - remainingPercentage
            };
          });

          // First segment positions stored with useState
          const [firstSegmentPositions, setFirstSegmentPositions] = useState({});
          
          // Chart ref
          const chartRef = useRef(null);

          // Store segment position - separate function to avoid hooks issues
          const storeSegmentPosition = (index, x) => {
            if (firstSegmentPositions[index] !== x) {
              setFirstSegmentPositions(prev => ({...prev, [index]: x}));
            }
          };

          // Label component for remaining
          const RemainingLabel = (props) => {
            const { x, y, width, height, index } = props;
            
            // Use regular useEffect instead of React.useEffect
            // and place it at the top level, not after conditions
            useEffect(() => {
              // Only store position if the index and x are valid
              if (index !== undefined && x !== undefined) {
                storeSegmentPosition(index, x);
              }
            }, [x, index]);
            
            // Early returns are fine after the hook
            if (width < 30) return null;
            if (index === undefined || !processedData[index]) return null;
            
            return (
              <text 
                x={x + 10} 
                y={y + height / 2} 
                textAnchor="start" 
                dominantBaseline="middle"
                fill="#FFFFFF"
                fontWeight="bold"
              >
                {processedData[index].remaining}
              </text>
            );
          };

          // Label component for sold
          const SoldLabel = (props) => {
            const { x, y, width, height, index } = props;
            if (width < 30) return null;
            if (index === undefined || !processedData[index]) return null;
            
            return (
              <text 
                x={x + 10} 
                y={y + height / 2} 
                textAnchor="start" 
                dominantBaseline="middle"
                fill="#FFFFFF"
                fontWeight="bold"
              >
                {processedData[index].sold}
              </text>
            );
          };
          
          // Custom bar shape
          const RoundedBar = (props) => {
            const { x, y, width, height, fill, index } = props;
            const radius = 10;
            
            // For first segment ("remainingPercentage")
            if (props.dataKey === "remainingPercentage") {
              // Store position in parent component's function
              if (index !== undefined && x !== undefined) {
                storeSegmentPosition(index, x);
              }
              
              return (
                <g>
                  <path
                    d={`
                      M ${x + radius},${y}
                      H ${x + width}
                      V ${y + height}
                      H ${x + radius}
                      Q ${x},${y + height} ${x},${y + height - radius}
                      V ${y + radius}
                      Q ${x},${y} ${x + radius},${y}
                    `}
                    fill={fill}
                  />
                </g>
              );
            }
            
            // For second segment ("soldPercentage")
            if (props.dataKey === "soldPercentage") {
              const firstSegmentX = firstSegmentPositions[index] || x;
              const totalWidth = (x - firstSegmentX) + width;
              
              return (
                <g>
                  <path
                    d={`
                      M ${x},${y}
                      H ${x + width - radius}
                      Q ${x + width},${y} ${x + width},${y + radius}
                      V ${y + height - radius}
                      Q ${x + width},${y + height} ${x + width - radius},${y + height}
                      H ${x}
                      V ${y}
                    `}
                    fill={fill}
                  />
                  
                  <rect
                    x={firstSegmentX}
                    y={y}
                    width={totalWidth}
                    height={height}
                    fill="none"
                    stroke="#666"
                    strokeWidth={2}
                    rx={radius}
                    ry={radius}
                  />
                </g>
              );
            }
            
            return null;
          };

          return (
            <div className="w-full p-4" style={{ backgroundColor: '#D5D2CD', fontFamily: "'Avenir', 'Avenir Next', 'Futura', sans-serif" }}>
              <h2 className="text-2xl font-bold mb-4">Batch Availability</h2>
              
              
              <div style={{ height: "300px" }}>
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    ref={chartRef}
                    data={processedData}
                    layout="vertical"
                    margin={{ top: 20, right: 30, left: 60, bottom: 5 }}
                    barSize={40}
                    barGap={0}
                    barCategoryGap={20}
                  >
                    <XAxis type="number" domain={[0, 100]} hide={true} />
                    <YAxis dataKey="batch" type="category" width={80} axisLine={false} tickLine={false} tick={{ fontWeight: 'bold', fontSize: '14px' }} />
                    <Legend 
                      align="center"
                      verticalAlign="bottom"
                      wrapperStyle={{ 
                        paddingTop: '20px',
                        paddingBottom: '10px',
                        fontFamily: "'Avenir', 'Avenir Next', 'Futura', sans-serif"
                      }}
                      layout="horizontal"
                      iconType="circle"
                      iconSize={14} 
                      formatter={(value) => (    // Custom text styling
                        <span style={{ color: '#666', fontSize: '20px', fontWeight: 'bold', fontFamily: "'Avenir', 'Avenir Next', 'Futura', sans-serif" }}>{value}</span>
                      )}
                    />
                    <Bar 
                      dataKey="remainingPercentage" 
                      stackId="a" 
                      fill="#9C8B7E" 
                      name="Available"
                      shape={<RoundedBar />}
                      label={<RemainingLabel />}
                    />
                    <Bar 
                      dataKey="soldPercentage" 
                      stackId="a" 
                      fill="#C2A998" 
                      name="Sold"
                      shape={<RoundedBar />}
                      label={<SoldLabel />}
                    />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>
          );
        };

        export default InventoryTracker;
        EOL
          
    - name: Install dependencies
      run: npm install
      
    - name: Build project
      run: npm run build
      
    - name: Debug build output
      run: |
        echo "Build directory contents:"
        ls -la build/
        echo "JavaScript files:"
        find build -name "*.js" | xargs ls -la
      
    - name: Deploy to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@v4
      with:
          branch: gh-pages
          folder: build
          clean: true
