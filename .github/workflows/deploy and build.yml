name: Deploy Inventory Tracker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allow manual trigger from GitHub UI
  workflow_dispatch:

jobs:
build-and-deploy:
runs-on: ubuntu-latest
    
steps:
  - name: Checkout code
    uses: actions/checkout@v3

  - name: Install dependencies
    run: npm install --no-package-lock

  - name: Create HTML and JS files
    run: |
          echo '<!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="utf-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1" />
              <title>Batch Availability</title>
            </head>
            <body>
              <div id="root"></div>
            </body>
          </html>' > public/index.html
          
          echo 'import React from "react";
          import ReactDOM from "react-dom/client";
          import "./index.css";
          import App from "./App";
          
          const root = ReactDOM.createRoot(document.getElementById("root"));
          root.render(
            <React.StrictMode>
              <App />
            </React.StrictMode>
          );' > src/index.js
          
          echo 'import React from "react";
          import InventoryTracker from "./components/InventoryTracker";
          
          function App() {
            return (
              <div className="App">
                <header className="bg-gray-800 text-white p-4">
                  <h1 className="text-3xl font-bold">Batch Availability</h1>
                  <p className="mt-2">Track batch availability</p>
                </header>
                <main className="container mx-auto py-6 px-4">
                  <InventoryTracker />
                </main>
              </div>
            );
          }
          
          export default App;' > src/App.js
          
  - name: Create full InventoryTracker component
    run: |
      cat > src/components/InventoryTracker.js << 'EOL'
      import React, { useRef, useEffect, useState } from 'react';
      import { BarChart, Bar, XAxis, YAxis, ResponsiveContainer } from 'recharts';

      const BatchInventoryChart = () => {
      // Inventory data - this is what you'll update in GitHub
      const inventoryData = [
      {
      batch: 'Batch 17',
      remaining: 25,
      total: 75
      },
      {
      batch: 'Batch 18',
      remaining: 75,
      total: 75
      },
      {
      batch: 'Batch 19',
      remaining: 80,
      total: 80
      },
      {
      batch: 'Batch 20',
      remaining: 100,
      total: 100
      }
      ];

      // Process data to add percentage information
      const processedData = inventoryData.map(item => {
      // Calculate sold number
      const soldCount = item.total - item.remaining;    
      // Calculate percentages
      const remainingPercentage = Math.round((item.remaining / item.total) * 100);
      const soldPercentage = 100 - remainingPercentage;    
      return {
      ...item,
      sold: soldCount,
      remainingPercentage,
      soldPercentage
      };
      });

      // State to track the x position of the first segment for each bar
      const [firstSegmentPositions, setFirstSegmentPositions] = useState({});

      // Simple label component for remaining bottles
      const RemainingLabel = (props) => {
      const { x, y, width, height, value, index } = props;
      if (width < 30) return null;

      // Find the data item for this bar segment
      if (index === undefined || !processedData[index]) return null;

      const count = processedData[index].remaining;   
      // Store first segment position for this index
      if (firstSegmentPositions[index] !== x) {
      // Create a copy of the current positions and update it
      const updatedPositions = {...firstSegmentPositions, [index]: x};
      // Use setTimeout to avoid state updates during render
      setTimeout(() => setFirstSegmentPositions(updatedPositions), 0);
      }

      return (
      <text 
        x={x + 10} 
        y={y + height / 2} 
        textAnchor="start" 
        dominantBaseline="middle"
        fill="#FFFFFF"
        fontWeight="bold"
      >
        {count}
      </text>
      );
      };

      // Simple label component for sold bottles
      const SoldLabel = (props) => {
      const { x, y, width, height, value, index } = props;
      if (width < 30) return null; 
      // Find the data item for this bar segment
      if (index === undefined || !processedData[index]) return null;  
      const count = processedData[index].sold;

      return (
      <text 
        x={x + 10} 
        y={y + height / 2} 
        textAnchor="start" 
        dominantBaseline="middle"
        fill="#FFFFFF"
        fontWeight="bold"
      >
        {count}
      </text>
      );
      };

      // Container ref to get dimensions
      const containerRef = useRef(null);
      const [dimensions, setDimensions] = useState({ width: 0, height: 0 });

      // Update dimensions on component mount
      useEffect(() => {
      if (containerRef.current) {
      const { width, height } = containerRef.current.getBoundingClientRect();
      setDimensions({ width, height });
      }
      }, []);

      // Update dimensions on window resize
      useEffect(() => {
      const handleResize = () => {
      if (containerRef.current) {
        const { width, height } = containerRef.current.getBoundingClientRect();
        setDimensions({ width, height });
      }
      };

      window.addEventListener('resize', handleResize);
      return () => window.removeEventListener('resize', handleResize);
      }, []);
      // Get chart details to align the border perfectly
      const chartRef = useRef(null);

      // Customized Rectangle component that creates a rounded rectangle with exact positioning
      const RoundedBar = (props) => {
      const { x, y, width, height, fill, index } = props;

      // Radius for rounded corners
      const radius = 8;

      // For first segment ("remainingPercentage")
      if (props.dataKey === "remainingPercentage") {
      // Store first segment position for this index
      if (firstSegmentPositions[index] !== x) {
        const updatedPositions = {...firstSegmentPositions, [index]: x};
        setTimeout(() => setFirstSegmentPositions(updatedPositions), 0);
      }
      
      return (
        <g>
          {/* Create a custom path that only rounds the left corners */}
          <path
            d={`
              M ${x + radius},${y}
              H ${x + width}
              V ${y + height}
              H ${x + radius}
              Q ${x},${y + height} ${x},${y + height - radius}
              V ${y + radius}
              Q ${x},${y} ${x + radius},${y}
            `}
            fill={fill}
          />
        </g>
      );
      }

      // For second segment ("soldPercentage")
      if (props.dataKey === "soldPercentage") {
      // Get the starting position of the first segment for this bar
      const firstSegmentX = firstSegmentPositions[index] || x; // Fallback to x if not stored yet
      const totalWidth = (x - firstSegmentX) + width;
      
      return (
        <g>
          {/* Create a custom path that only rounds the right corners */}
          <path
            d={`
              M ${x},${y}
              H ${x + width - radius}
              Q ${x + width},${y} ${x + width},${y + radius}
              V ${y + height - radius}
              Q ${x + width},${y + height} ${x + width - radius},${y + height}
              H ${x}
              V ${y}
            `}
            fill={fill}
          />
          
          {/* Draw outer border around both segments */}
          <rect
            x={firstSegmentX}
            y={y}
            width={totalWidth}
            height={height}
            fill="none"
            stroke="#666"
            strokeWidth={2}
            rx={radius}
            ry={radius}
          />
        </g>
      );
      }

      return null;
      };

      return (
      <div className="w-full p-4" style={{ 
      backgroundColor: '#D5D2CD',
      fontFamily: "'Avenir', 'Avenir Next', 'Futura', sans-serif"
      }}>
      <h2 className="text-2xl font-bold mb-4" style={{ fontFamily: "'Avenir', 'Avenir Next', 'Futura', sans-serif" }}>Batch Availability</h2>
      <div className="flex justify-center">
        <div className="flex flex-col items-center gap-2 mb-4">
          <div className="flex items-center">
            <div className="w-4 h-4 mr-2 rounded" style={{ backgroundColor: '#9C8B7E' }}></div>
            <span>Available</span>
          </div>
          <div className="flex items-center">
            <div className="w-4 h-4 mr-2 rounded" style={{ backgroundColor: '#C2A998' }}></div>
            <span>Sold</span>
          </div>
        </div>
      </div>
      <div ref={containerRef} style={{ height: "400px" }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            ref={chartRef}
            data={processedData}
            layout="vertical"
            margin={{ top: 20, right: 30, left: 60, bottom: 5 }}
            barSize={40}
            barGap={0}
            barCategoryGap={20}
          >
            <XAxis type="number" domain={[0, 100]} hide={true} padding={{ left: 0, right: 0 }} />
            <YAxis 
              dataKey="batch" 
              type="category" 
              width={80} 
              axisLine={false}
              tickLine={false}
            />
            {/* Remaining Bar with rounded left corners */}
            <Bar 
              dataKey="remainingPercentage" 
              stackId="a" 
              fill="#9C8B7E" 
              name="Available"
              shape={<RoundedBar />}
              label={<RemainingLabel />}
            />
            {/* Sold Bar with rounded right corners */}
            <Bar 
              dataKey="soldPercentage" 
              stackId="a" 
              fill="#C2A998" 
              name="Sold"
              shape={<RoundedBar />}
              label={<SoldLabel />}
            />
          </BarChart>
        </ResponsiveContainer>
      </div>
      </div>
      );
      };

      export default BatchInventoryChart;
          EOL
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
        
      - name: Install dependencies
        run: npm install
      
      - name: Build project
        run: npm run build
      
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages # The branch the action should deploy to
          folder: build    # The folder the action should deploy
          clean: true      # Automatically remove deleted files from the deployment branch
